// Generated by CoffeeScript 1.12.7
(function() {
  var patterns,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  document.ElementsExists = true;

  patterns = {
    brackets: /\[\]$/,
    bracketsSt: /\[\]\*$/
  };

  $(document).ready(function() {});

  $(document).on('click', '.select > .option', function() {
    return $(this).toggleClass('active');
  });

  $(document).on('click', '.checkbox', function() {
    return $(this).toggleClass('active');
  });

  $(document).on('click', '.check_all', function() {
    var active, parent;
    active = false;
    if ($(this).hasClass('active')) {
      active = true;
    }
    if ($(this).data('parent') != null) {
      parent = $(this).parent();
    } else {
      parent = $(this).parents($(this).data('parent'));
    }
    return parent.find('.checkbox').each(function() {
      return $(this).toggleClass('active', active);
    });
  });

  window.Elements = {
    selectElement: {},
    select: e(function() {
      this.selectElement = $(e);
      return this;
    }),
    getMultiSelected: function() {
      var data;
      data = [];
      this.selectElement.find('.active').each(function() {
        return data.push($(this).data('value'));
      });
      return data;
    },
    getMultiSelectedWithData: function() {
      var data;
      data = [];
      this.selectElement.find('.active').each(function() {
        return data.push($(this).data());
      });
      return data;
    },
    getCheckbox: function(element) {
      return $(element).hasClass('active');
    },
    formSerialize: function(element) {
      var data;
      data = {};
      $(element).find('.checkbox').each(function() {
        var name;
        name = $(this).data('name');
        return data[name] = $(this).hasClass('active');
      });
      $(element).find('.select').each(function() {
        var name;
        name = $(this).data('name');
        return $(this).find('.active').each(function() {
          if (!(indexOf.call(data, name) >= 0)) {
            data[name] = [];
          }
          return data[name].push($(this).data('value'));
        });
      });
      return data;
    },
    formSerializePush: function(e, data) {
      return 1;
    },
    getCheckedValues: function(element, n) {
      var data;
      if (n == null) {
        n = '.checkbox';
      }
      data = [];
      $(element).find(n).each(function() {
        if ($(this).hasClass('active')) {
          return data.push($(this).data('value'));
        }
      });
      return data;
    },
    customFormSerializePush: function(d, f) {
      $(f).find('.checkbox').each(i(function() {
        var check, key, name, value;
        name = $(this).data('name');
        value = $(this).data('value');
        key = $(this).data('key');
        check = $(this).hasClass('active');
        if (name != null) {
          return;
        }
        if (name.match(patterns.brackets)) {
          if (check) {
            name = name.replace(patterns.brackets, '');
            if (value !== void 0) {
              return d[name].push(value);
            }
          }
        } else if (name.match(patterns.bracketsSt)) {
          name = name.replace(patterns.bracketsSt, '');
          return d[name][key != null ? key : key = i] = value != null ? value : value = check;
        } else {
          return d[name] = value != null ? value : value = check;
        }
      }));
      $(f).find('.select').each(function() {
        var name;
        name = $(this).data('name');
        return $(this).find('.option').each(function() {
          if ($(this).hasClass('active')) {
            return d[name].push($(this).data('value'));
          }
        });
      });
      return d;
    }
  };

}).call(this);
